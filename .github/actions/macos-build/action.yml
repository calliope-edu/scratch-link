#Xamarin.Mac -> 6.12
#iOS 16.2 -> 16.4
#macOS (Cocoa) 9.1 -> 9.3
#.NET -> 6.0
#.NET -> 7.0
#Visual Studio 17.5 -> 17.6
name: Build for macOS
description: Core build steps for macOS
inputs:
  configuration:
    description: The configuration to build, like "Debug"
    required: true
    default: Debug
  artifact_tag:
    description: A string to tag the build artifact, like "Debug" or "MAS"
    required: false
    default: ""
  AC_USERNAME:
    description: App Store Connect user name
    required: false
    default: ""
  AC_PASSWORD:
    description: App Store Connect password
    required: false
    default: "not set"
  MATCH_GIT_URL:
    description: Git repository URL for Fastlane Match
    required: false
    default: ""
  MATCH_PASSWORD:
    description: Password for Fastlane Match storage
    required: false
    default: "not set"
  MATCH_STORAGE_MODE:
    description: Storage mode for Fastlane Match
    required: false
    default: "git"
runs:
  using: composite
  steps:
    # Note that runs.env doesn't work in composite actions
    - name: Setup environment variables
      shell: bash
      run: |
        cat >> $GITHUB_ENV <<EOF
        AC_USERNAME=${{ inputs.AC_USERNAME }}
        AC_PASSWORD=${{ inputs.AC_PASSWORD }}
        MATCH_GIT_URL=${{ inputs.MATCH_GIT_URL }}
        MATCH_PASSWORD=${{ inputs.MATCH_PASSWORD }}
        MATCH_STORAGE_MODE=${{ inputs.MATCH_STORAGE_MODE }}
        EOF
    - name: Set Xcode version
      shell: bash
      run: |
        XCODE_ROOT=/Applications/Xcode_14.2.app
        echo "MD_APPLE_SDK_ROOT=$XCODE_ROOT" >> $GITHUB_ENV
        sudo xcode-select -s $XCODE_ROOT
    - name: Build Safari helper # do this early to fail faster
      shell: bash
      run: xcodebuild -project "Scratch Link Safari Helper/Scratch Link Safari Helper.xcodeproj" -scheme "Scratch Link Safari Helper" clean build
    - name: Setup Xamarin
      shell: bash
      run: |
        #cat "$VM_ASSETS/select-xamarin-sdk-v2.sh"
        $VM_ASSETS/select-xamarin-sdk-v2.sh --mono=6.12 --mac=9.1 --ios=16.2
    - name: Setup dotnet
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '6.0.x'
    - uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        # Look to see if there is a cache hit for the corresponding requirements file
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
        restore-keys: |
          ${{ runner.os }}-nuget
    - name: "Build for Mac: ${{ inputs.configuration }}"
      env:
        CONFIG: Debug
        ARTIFACT_TAG: Debug
      shell: bash
      run: |
        msbuild -m -t:Restore -p:Configuration=${{ inputs.configuration }}_Mac scratch-link.sln
        "/Applications/Visual Studio.app/Contents/MacOS/vstool" build -t:Build -c:${{ inputs.configuration }}_Mac "${PWD}/scratch-link.sln"
        # "for" is just a convenient way to resolve the glob to a variable so we can DRY the filename for "if" and "mv"
        for PKGPATH in scratch-link-mac/bin/${{ inputs.configuration }}/"Scratch Link"*.pkg; do
          if [ -r "$PKGPATH" ]; then
            PKGFILE="${PKGPATH##*/}"
            if [ -n "${{ inputs.artifact_tag }}" ]; then
              PKGFILE="${PKGFILE/Scratch Link/Scratch Link-${{ inputs.artifact_tag }}"
            fi
            mkdir -p Artifacts
          fi
          # this is outside the "if" to force an error if the file doesn't exist
          mv -v "$PKGPATH" "Artifacts/${PKGFILE}"
        done
