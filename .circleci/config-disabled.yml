version: 2.1
orbs:
  node: circleci/node@5.1.0
  windows: circleci/windows@5.0.0
alias_anchors: # anchors must be defined in YAML before being used by an alias
  - &should-sign
    or:
      - equal: [ develop, << pipeline.git.branch >> ]
      - equal: [ main, << pipeline.git.branch >> ]
workflows:
  version: 2
  version-build-release:
    jobs:
      - semver
      - build-mac:
          context: scratch-desktop-and-link
          requires:
            - semver
      - build-win:
          context: scratch-desktop-and-link
          requires:
            - semver
      - release:
          requires:
            - build-mac
            - build-win
          filters:
            branches:
              only:
                - develop
                - main
jobs:
  semver:
    executor: node/default
    steps:
      - checkout
      - node/install # will use .nvmrc
      - node/install-packages
      - make-semantic-release-remote
      # In release branches, this will calculate the version and save that to package.json so the build can use it.
      # In other branches, it'll just check the semantic-release config.
      # Note that if semantic-release makes changes it will automatically push them.
      # That's the whole reason for the weird "local remote" stuff.
      # See also: https://github.com/semantic-release/semantic-release/issues/964
      - run: npx --no -- semantic-release
      - persist-semantic-release-remote
  release:
    executor: node/default
    steps:
      - checkout
      - node/install # will use .nvmrc
      - checkout-semantic-release-remote
      - run:
          name: Pushing semantic-release changes for real
          command: |
            git push --tags origin << pipeline.git.branch >>
            git push origin 'refs/notes/*' # semantic-release tracks channels with notes
  build-mac:
    macos:
      xcode: 14.2 # warning MM0079: The recommended Xcode version for Xamarin.Mac 9.0.0 is Xcode 14.1 or later.
    environment:
      HOMEBREW_NO_AUTO_UPDATE: 1 # save some time
    steps:
      - checkout-semantic-release-remote
      - run:
          name: Build Safari helper
          command: |
            xcodebuild -project "Scratch Link Safari Helper/Scratch Link Safari Helper.xcodeproj" -scheme "Scratch Link Safari Helper" clean build
      - restore_cache:
          keys:
            - visual-studio-mac-{{ checksum ".circleci/install-or-extract-vs-mac.sh" }}
      - run:
          name: Install/Extract Visual Studio for Mac
          command: |
            # CACHE_ARCHIVE must match the path in save_cache
            CACHE_ARCHIVE="/tmp/visual-studio-mac.tar.gz"
            bash ./.circleci/install-or-extract-vs-mac.sh "$CACHE_ARCHIVE"
      - save_cache:
          key: visual-studio-mac-{{ checksum ".circleci/install-or-extract-vs-mac.sh" }}
          paths: # Caching an archive instead of loose files works around CircleCI's issues with extracting links and permissions on macOS
            - /tmp/visual-studio-mac.tar.gz
      - unless:
          condition: *should-sign
          steps:
            - do_mac_build:
                configuration: Debug
                artifact_tag: Debug
      - when:
          condition: *should-sign
          steps:
            - add_ssh_keys
            - run:
                name: Import CI context
                command: fastlane circleci
            - do_mac_build:
                configuration: Release_DevID
                artifact_tag: notarizeMe # see below
            - do_mac_build:
                configuration: Release_MAS
                artifact_tag: MAS
            - run:
                name: Notarize Developer ID build
                command: |
                  for PKGPATH in Artifacts/"Scratch Link-notarizeMe"*.pkg; do
                    PKGFILE="${PKGPATH##*/}"
                    scratch-link-mac/notarize.sh edu.mit.scratch.scratch-link "${PKGPATH}" "${PKGPATH}" /tmp || rm -f "${PKGPATH}"
                    mv -v "${PKGPATH}" "Artifacts/${PKGFILE/Scratch Link-notarizeMe/Scratch Link}"
                  done
      - store_artifacts:
          path: Artifacts/
  build-win:
    executor: windows/server-2022 # Windows Server with Visual Studio 2022
    steps:
      - checkout-semantic-release-remote
      - unless:
          condition: *should-sign
          steps:
            - do_win_build:
                configuration: Debug
                artifact_tag: Debug
      - when:
          condition: *should-sign
          steps:
            - do_win_build:
                configuration: Release
      - store_artifacts:
          path: Artifacts/
commands:
  make-semantic-release-remote:
    steps:
      - run:
          name: Make local 'remote' for semantic-release
          command: |
            # semantic-release tracks channels with notes, so we need to grab those from the real remote
            # semantic-release also wants to inspect every branch listed in its "branches" setting
            git fetch -uf origin main:main develop:develop 'refs/notes/*:refs/notes/*'
            git clone . --bare --mirror semantic-release-remote # mirror copies notes
            git remote set-url origin "file://$(realpath semantic-release-remote)" # semantic-release needs a proper URL
  persist-semantic-release-remote:
    steps:
      - persist_to_workspace:
          root: .
          paths:
            - semantic-release-remote
  checkout-semantic-release-remote:
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Pull semantic-release changes from local 'remote'
          command: |
            git remote add semantic-release semantic-release-remote
            git pull --tags semantic-release << pipeline.git.branch >>
            git fetch semantic-release 'refs/notes/*:refs/notes/*' # semantic-release tracks channels with notes
  do_mac_build:
    parameters:
      configuration:
        default: "Release"
        type: string
      artifact_tag:
        default: ""
        type: string
    steps:
      - run:
          name: "Build for Mac: <<parameters.configuration>>"
          command: |
            # installing Visual Studio put some new path files into /etc/path.d
            # some CircleCI images automatically load those new files for us, some don't
            # run `path_helper` here to make sure the path to `msbuild` is in $PATH
            eval `/usr/libexec/path_helper -s`
            msbuild -m -t:Restore -p:Configuration=<<parameters.configuration>>_Mac scratch-link.sln
            "/Applications/Visual Studio.app/Contents/MacOS/vstool" build -t:Build -c:<<parameters.configuration>>_Mac "${PWD}/scratch-link.sln"
            # "for" is just a convenient way to resolve the glob to a variable so we can DRY the filename for "if" and "mv"
            for PKGPATH in scratch-link-mac/bin/<<parameters.configuration>>/"Scratch Link"*.pkg; do
              if [ -r "$PKGPATH" ]; then
                PKGFILE="${PKGPATH##*/}"
                if [ -n "<<parameters.artifact_tag>>" ]; then
                  PKGFILE="${PKGFILE/Scratch Link/Scratch Link-<<parameters.artifact_tag>>}"
                fi
                mkdir -p Artifacts
              fi
              # this is outside the "if" to force an error if the file doesn't exist
              mv -v "$PKGPATH" "Artifacts/${PKGFILE}"
            done
  do_win_build:
    parameters:
      configuration:
        default: "Release"
        type: string
      artifact_tag:
        default: ""
        type: string
    steps:
      - run:
          name: "Build for Windows: <<parameters.configuration>>"
          command: |
            # Build the MSIX project instead of the Solution because msbuild gets grumpy about the Mac project.
            # That means SolutionDir needs to be set artificially, though.
            # The `UapAppxPackageBuildMode=StoreAndSideload` means it'll build both MSIXUpload and MSIXBundle.
            # The StoreUpload mode does that too, but that might be a bug, and semantically "StoreAndSideload" is what we want.
            msbuild scratch-link-win-msix/scratch-link-win-msix.wapproj -maxCpuCount -restore -t:Build -p:SolutionDir="$PWD\" -p:Configuration="<<parameters.configuration>>_Win" -p:AppxBundlePlatforms="x86|x64|ARM64" -p:AppxBundle=Always -p:UapAppxPackageBuildMode=StoreAndSideload
      - run:
          name: "Move Windows artifacts: <<parameters.configuration>>"
          shell: bash
          command: |
            mkdir -p Artifacts
            # The store package is fine as is: no user will see this filename.
            mv -v scratch-link-win-msix/AppPackages/scratch-link-win-msix_*_<<parameters.configuration>>_Win.msixupload Artifacts/
            # Transform the bundle for a more user-friendly filename
            for PKGPATH in scratch-link-win-msix/AppPackages/scratch-link-win-msix_*_<<parameters.configuration>>_Win_Test/scratch-link-win-msix_*_<<parameters.configuration>>_Win.msixbundle; do
              if [ -r "$PKGPATH" ]; then
                PKGFILE="${PKGPATH##*/}"
                [[ $PKGFILE =~ scratch-link-win-msix_([.0-9]+)_(.*)_<<parameters.configuration>>_Win.msixbundle$ ]]
                PKGVERSION=${BASH_REMATCH[1]}
                PKGPLATFORMS=${BASH_REMATCH[2]}
              fi
              # do the move outside the "if" above to force an error if the file doesn't exist
              if [ -z "<<parameters.artifact_tag>>" ]; then
                mv -v "$PKGPATH" "Artifacts/Scratch Link ${PKGVERSION}.msixbundle"
              else
                mv -v "$PKGPATH" "Artifacts/Scratch Link ${PKGVERSION} <<parameters.artifact_tag>>.msixbundle"
              fi
            done
